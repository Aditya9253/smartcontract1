// SPDX-License-Identifier:GPL -3.0

pragma solidity >=0.5.0 <0.9.0;

contract EventContract{
    struct Event{
        address organizer;
        string name;
        uint date;
        uint price;
        uint ticketCount;
        uint ticketRemain;

    }

    mapping (uint=>Event) public events;
    mapping (address=>mapping(uint=>uint) ) public ticket ;
    uint public nextID;


    function createEvent(string memory name,uint date,uint price,uint ticketCount) external{
    require(date>block.timestamp,"You cam organize event for future date");
    require(ticketCount>0,"No of tickets should be greater than 0");
    

    events[nextID]= Event(msg.sender,name,date,price,ticketCount,ticketCount);
     nextID++;
    }
    function buytickets(uint id,uint quantity) external payable {
    require(events[id].date!=0,"No event is scheduled");
    require(events[id].date>block.timestamp,"Event date should be grater than given time");
    

    Event storage _events=events[id];
    require(msg.value==(_events.price*quantity),"Ether is not enough");
    require(_events.ticketRemain>=quantity);
   _events.ticketRemain-=quantity;
   ticket[msg.sender][id]+=quantity;


    }
    function transfer(uint id,uint quantity,address to)external {
    require(events[id].date!=0,"No event is scheduled");
    require(events[id].date>block.timestamp,"Event date should be grater than given time");
    require(ticket[msg.sender][id]>=quantity,"tickets quantity is not enough to send ");
    ticket[msg.sender][id]-=quantity;
    ticket[to][id]+=quantity;



    }


}